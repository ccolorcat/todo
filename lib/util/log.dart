// Author: cxx
// Date: 2021-06-13
// GitHub: https://github.com/ccolorcat

import 'package:logger/logger.dart';

import '../config.dart';
import 'lru_cache.dart';

typedef LogBuilder = dynamic Function();

class Log {
  static final _cached = LruCache(8);
  static final _level = KDevMode ? Level.verbose : Level.nothing;
  static final Logger _logger = Logger(
    printer: _Printer(),
    level: _level,
  );

  factory Log([String tag = 'todo']) {
    return _cached.getOrPut(tag, () => Log._internal(tag));
  }

  Log._internal(this._tag);

  final String _tag;

  void v(dynamic message, [dynamic error, StackTrace? stackTrace]) {
    _log(Level.verbose, message, error, stackTrace);
  }

  void lv(LogBuilder builder, [dynamic error, StackTrace? stackTrace]) {
    _lazyLog(Level.verbose, builder, error, stackTrace);
  }

  /// Log a message at level [Level.debug].
  void d(dynamic message, [dynamic error, StackTrace? stackTrace]) {
    _log(Level.debug, message, error, stackTrace);
  }

  void ld(LogBuilder builder, [dynamic error, StackTrace? stackTrace]) {
    _lazyLog(Level.debug, builder, error, stackTrace);
  }

  /// Log a message at level [Level.info].
  void i(dynamic message, [dynamic error, StackTrace? stackTrace]) {
    _log(Level.info, message, error, stackTrace);
  }

  void li(LogBuilder builder, [dynamic error, StackTrace? stackTrace]) {
    _lazyLog(Level.info, builder, error, stackTrace);
  }

  /// Log a message at level [Level.warning].
  void w(dynamic message, [dynamic error, StackTrace? stackTrace]) {
    _log(Level.warning, message, error, stackTrace);
  }

  void lw(LogBuilder builder, [dynamic error, StackTrace? stackTrace]) {
    _lazyLog(Level.warning, builder, error, stackTrace);
  }

  /// Log a message at level [Level.error].
  void e(dynamic message, [dynamic error, StackTrace? stackTrace]) {
    _log(Level.error, message, error, stackTrace);
  }

  void le(LogBuilder builder, [dynamic error, StackTrace? stackTrace]) {
    _lazyLog(Level.error, builder, error, stackTrace);
  }

  /// Log a message at level [Level.wtf].
  void wtf(dynamic message, [dynamic error, StackTrace? stackTrace]) {
    _log(Level.wtf, message, error, stackTrace);
  }

  void lwtf(LogBuilder builder, [dynamic error, StackTrace? stackTrace]) {
    _lazyLog(Level.wtf, builder, error, stackTrace);
  }

  void _log(
    Level level,
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) {
    _logger.log(level, '$_tag: $message', error, stackTrace);
  }

  void _lazyLog(
    Level level,
    LogBuilder builder, [
    dynamic error,
    StackTrace? stackTrace,
  ]) {
    if (level.index >= _level.index) {
      final msg = builder.call();
      _log(level, msg, error, stackTrace);
    }
  }
}

class _Printer extends PrettyPrinter {
  static const _logPrefix = 'package:todo/util/log';

  /// Matches a stacktrace line as generated on Android/iOS devices.
  /// For example:
  /// #1      Logger.log (package:logger/src/logger.dart:115:29)
  static final _deviceStackTraceRegex =
      RegExp(r'#[0-9]+[\s]+(.+) \(([^\s]+)\)');

  /// Matches a stacktrace line as generated by Flutter web.
  /// For example:
  /// packages/logger/src/printers/pretty_printer.dart 91:37
  static final _webStackTraceRegex =
      RegExp(r'^((packages|dart-sdk)\/[^\s]+\/)');

  /// Matches a stacktrace line as generated by browser Dart.
  /// For example:
  /// dart:sdk_internal
  /// package:logger/src/logger.dart
  static final _browserStackTraceRegex =
      RegExp(r'^(?:package:)?(dart:[^\s]+|[^\s]+)');

  _Printer({
    int methodCount = 2,
    int errorMethodCount = 8,
    int lineLength = 120,
    bool colors = true,
    bool printEmojis = true,
    bool printTime = false,
  }) : super(
          methodCount: methodCount,
          errorMethodCount: errorMethodCount,
          lineLength: lineLength,
          colors: colors,
          printEmojis: printEmojis,
          printTime: printTime,
        );

  @override
  String? formatStackTrace(StackTrace? stackTrace, int methodCount) {
    if (stackTrace == null) return null;
    var lines = stackTrace.toString().split('\n');
    var formatted = <String>[];
    var count = 0;
    for (var line in lines) {
      if (_discardDeviceStacktraceLine(line) ||
          _discardWebStacktraceLine(line) ||
          _discardBrowserStacktraceLine(line)) {
        continue;
      }
      formatted.add('#$count   ${line.replaceFirst(RegExp(r'#\d+\s+'), '')}');
      if (++count == methodCount) {
        break;
      }
    }
    return formatted.isEmpty ? null : formatted.join('\n');
  }

  bool _discardDeviceStacktraceLine(String line) {
    var match = _deviceStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    var result = match.group(2);
    if (result == null) {
      return false;
    }
    return result.startsWith('package:logger') || result.startsWith(_logPrefix);
  }

  bool _discardWebStacktraceLine(String line) {
    var match = _webStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    final result = match.group(1);
    if (result == null) {
      return false;
    }
    return result.startsWith('packages/logger') ||
        result.startsWith('dart-sdk/lib') ||
        result.startsWith(_logPrefix);
  }

  bool _discardBrowserStacktraceLine(String line) {
    var match = _browserStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    final result = match.group(1);
    if (result == null) {
      return false;
    }
    return result.startsWith('package:logger') ||
        result.startsWith('dart:') ||
        result.startsWith(_logPrefix);
  }
}
